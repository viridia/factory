#!/bin/bash
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MOUNT_PID_FILE=$BASEDIR/mount.pid
PROXY_PID_FILE=$BASEDIR/proxy.pid

usage() {
  echo "Usage: vm COMMAND [SUBCOMMAND]"
  echo "Valid commands are:"
  echo "  mount - mount the project directory into the minikube vm."
  echo "  unmount - unmount the project directory from the minikube vm."
  echo "  start - start the k8shell container."
  echo "  stop - stop the k8shell container."
  echo "  shell - open a shell into the development container."
  echo "  client (build|up|down|replace) - start / stop the client server."
  echo "  db (up|down|replace) - start / stop the database."
  echo "  director (build|up|down|replace) - start / stop the director."
  echo "  ds (up|down|replace) - start / stop the deepstream router."
  echo "  ingress (up|down|replace) - start / stop the ingress."
  echo "  scheduler (build|up|down|replace) - start / stop the scheduler."
  echo "  proxy start - start the proxy to the Kubernetes control port."
  echo "  proxy stop - stop the proxy to the Kubernetes control port."
  echo "  prune - delete all factory pods."
  exit 1
}

service() {
  case $1 in
    up)
      kubectl create -f "$BASEDIR/${3}"
      ;;

    down)
      kubectl delete -f "$BASEDIR/${3}"
      ;;

    replace)
      kubectl replace -f "$BASEDIR/${3}"
      ;;

    build)
      yarn run "build-image-${2}"
      ;;

    *)
      echo "unrecognized ${2} option: '$1'"
      usage
      exit 1
      ;;

  esac
}

if [[ $# -eq 0 ]]; then
  usage
fi

case $1 in
  mount)
    if [[ -e "$MOUNT_PID_FILE" ]]; then
      kill $(cat $MOUNT_PID_FILE)
    fi
    minikube mount $BASEDIR:/usr/nimble/src > /dev/null &
    MOUNT_PID=$!
    echo $MOUNT_PID > $MOUNT_PID_FILE
    echo "Mount successful, process id: $MOUNT_PID."
    ;;

  unmount)
    if [[ -e "$MOUNT_PID_FILE" ]]; then
      kill $(cat $MOUNT_PID_FILE)
      rm $MOUNT_PID_FILE
      echo "Unmounted."
    fi
    ;;

  start)
    kubectl create -f "$BASEDIR/config/k8shell.yml"
    ;;

  stop)
    kubectl delete -f "$BASEDIR/config/k8shell.yml"
    echo "Waiting for pod to terminate..."
    kubectl get pod k8shell > /dev/null 2> /dev/null
    while [ $? -eq 0 ]; do
      sleep 3
      kubectl get pod k8shell > /dev/null 2> /dev/null
    done
    ;;

  shell)
    kubectl exec -it k8shell -- /bin/bash
    ;;

  client)
    service "$2" "client" "config/dev/client.yml"
    ;;

  db)
    service "$2" "database" "config/dev/rethinkdb.yml"
    ;;

  director)
    service "$2" "director" "config/dev/director.yml"
    ;;

  ds)
    service "$2" "deepstream" "config/dev/deepstream.yml"
    ;;

  ingress)
    service "$2" "ingress" "config/dev/ingress.yml"
    ;;

  scheduler)
    service "$2" "scheduler" "config/dev/scheduler.yml"
    ;;

  proxy)
    case $2 in
      start)
        if [[ -e "$PROXY_PID_FILE" ]]; then
          kill $(cat $PROXY_PID_FILE)
        fi
        kubectl proxy --port 8077 &
        PROXY_PID=$!
        echo $PROXY_PID > $PROXY_PID_FILE
        sleep 0.2
        echo
        ;;

      stop)
        if [[ -e "$PROXY_PID_FILE" ]]; then
          kill $(cat $PROXY_PID_FILE)
          rm $PROXY_PID_FILE
          echo "Proxy stopped."
        fi
        ;;

      *)
        echo "unrecognized proxy option: '$2'"
        usage
        exit 1
        ;;

    esac
    ;;

  prune)
    kubectl delete pod --selector=group=factory
    ;;

  *)
    echo "unrecognized option: '$1'"
    usage
    exit 1
    ;;
esac
